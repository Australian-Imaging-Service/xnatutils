#!/usr/bin/env python
"""
Displays available subjects/scans from projects on MBI-XNAT
"""
import argparse
from xnatutils import (
    connect, XnatUtilsUsageError, matching_sessions, list_results, is_regex)


DATATYPES = ('project', 'subject', 'session', 'scan')

parser = argparse.ArgumentParser(__doc__)
parser.add_argument('id', type=str, nargs='*',
                    help="The ID of the project/subject/session to list from")
parser.add_argument('--datatype', type=str, choices=DATATYPES, default=None,
                    help=("The data type to list, can be one of '{}'"
                          .format("', '".join(DATATYPES))))
parser.add_argument('--user', type=str, default=None,
                    help=("The user to connect to MBI-XNAT with"))
args = parser.parse_args()


if args.datatype is None:
    if not args.id:
        datatype = 'project'
    else:
        if is_regex(args.id):
            raise XnatUtilsUsageError(
                "'--datatype' option must be provided if using regular "
                "expression id, {} (one with special characters in it)"
                .format(args.id[0]))
        num_underscores = max(i.count('_') for i in args.id)
        if num_underscores == 0:
            datatype = 'subject'
        elif num_underscores == 1:
            datatype = 'session'
        elif num_underscores == 2:
            datatype = 'scan'
        else:
            raise XnatUtilsUsageError("Invalid parent-ID '{}'"
                                      .format(args.parent_id))
else:
    datatype = args.datatype
    
if datatype == 'subject' and is_regex(args.id):
    raise XnatUtilsUsageError(
        "Regular expression id strings cannot be used with subject datatype "
        "listings".format(args.id[0]))

with connect(args.user) as mbi_xnat:
    if datatype == 'project':
        print '\n'.join(sorted(list_results(mbi_xnat, 'projects', 'ID')))
    elif datatype == 'subject':
        if len(args.id) != 1:
            raise XnatUtilsUsageError(
                "Only one project ID can be provided when listing subjects "
                "(provided '{}')".format("', '".join(args.id)))
        print '\n'.join(sorted(
            list_results(mbi_xnat,
                         'projects/{}/subjects'.format(args.id[0]), 'label')))
    elif datatype == 'session':
        if is_regex(args.id):
            sessions = matching_sessions(mbi_xnat, args.id)
        else:
            if len(args.id) != 1:
                raise XnatUtilsUsageError(
                    "Only one subject ID can be provided when listing sessions"
                    "(provided '{}')".format("', '".join(args.id)))
            sessions = list_results(
                mbi_xnat, 'subjects/{}/experiments'.format(args.id[0]),
                'label')
            print '\n'.join(sorted())
    elif datatype == 'scan':
        scans = set()
        for session in matching_sessions(mbi_xnat, args.id):
            exp = mbi_xnat.experiments[session]
            session_scans = set(list_results(
                mbi_xnat, 'experiments/{}/scans'.format(exp.id), 'type'))
            scans |= session_scans
        print '\n'.join(sorted(scans))
    else:
        assert False
        
        
