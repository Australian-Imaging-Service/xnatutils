#!/usr/bin/env python
"""
Downloads datasets (e.g. scans) from MBI-XNAT.

By default all scans in the provided session(s) are downloaded to the current
working directory unless they are filtered by the provided '--scan' option(s).
Both the session name and scan filters can be regular expressions. If there are
multiple resources for a dataset on MBI-XNAT (unlikely) the one to download can
be specified using the '--format' option.

The destination directory can be specified by the '--directory' option.
Each session will be downloaded to its own folder under the destination
directory unless the '--subject-dir's option is provided in which case the
sessions will be grouped under separate subject directories.

The downloaded images can be automatically converted to NIfTI or MRtrix formats
using dcm2nii or mrconvert, if the tools are installed and on the system path,
by specifying the desired format using the '--convert_to' option.

User credentials can be stored in a ~/.netrc file so that they don't need to be
entered each time a command is run. If a new user provided or netrc doesn't
exist the tool will ask whether to create a ~/.netrc file with the given
credentials.
"""
import os
import tempfile
import errno
import shutil
import argparse
from xnatutils import (
    connect, get_data_format, get_extension, data_format_exts,
    XnatUtilsUsageError, matching_sessions)

parser = argparse.ArgumentParser()
parser.add_argument('session', type=str, nargs='+',
                    help="Name of the session(s) to download the dataset from")
parser.add_argument('--directory', type=str, default=None,
                    help=("Path to download the scans to. If not provided the "
                          "current working directory will be used"))
parser.add_argument('--scan', type=str, default=None, action='append',
                    help=("Name of the scans to include in the download. If "
                          "not provided all scans from the session are "
                          "downloaded. Multiple scans can be specified"))
parser.add_argument('--format', type=str, default=None,
                    help=("The format of the resource to download. Not "
                          "required if there is only one valid resource for "
                          "each given dataset (e.g. DICOM), which is "
                          "typically the case"))
parser.add_argument('--convert_to', type=str, default=None,
                    choices=('nifti', 'mif'),
                    help=("Runs a conversion script on the downloaded scans "
                          "to convert them to a given format if required"))
parser.add_argument('--subject_dirs', type=bool, action='store_true',
                    default=False, help=(
                        "Whether to organise sessions within subject "
                        "directories to hold the sessions in or not"))
parser.add_argument('--user', type=str, default=None,
                    help=("The user to connect to MBI-XNAT with"))
args = parser.parse_args()

if args.convert_to is not None:
    raise NotImplementedError(
        "'--convert_to' option is not currently supported")

if args.subject_dirs is not None:
    raise NotImplementedError(
        "'--subject_dirs' option is not currently supported")


if args.directory is None:
    download_dir = os.getcwd()
else:
    download_dir = args.directory

try:
    with connect(args.user) as mbi_xnat:
        downloaded = []
        for session_label in matching_sessions(mbi_xnat, args.session):
            exp = mbi_xnat.experiments[session_label]
            scans = exp.scans.keys() if args.scan is None else args.scan
            for scan_name in scans:
                scan = exp.scans[scan_name]
                scan_label = scan.id + '-' + scan.type
                if args.format is not None:
                    data_format = args.format.upper()
                else:
                    data_formats = [r.label for r in scan.resources.itervalues()
                                    if r.label in data_format_exts]
                    if not data_formats:
                        raise XnatUtilsUsageError(
                            "No valid scan formats for '{}' in '{}'"
                            .format(scan_name, args.session))
                    elif len(data_formats) > 1:
                        raise XnatUtilsUsageError(
                            "Multiple valid scan formats for '{}' in '{}' ('{}') "
                            "please specify one using the --scan option"
                            .format(scan_name, args.session,
                                    "', '".join(resources)))
                    data_format = data_formats[0]
                # Get the target location for the downloaded scan
                target_basename = scan.type + get_extension(data_format)
                target_path = os.path.join(download_dir, target_basename)
                tmp_dir = target_path + '.download'
                # Download the scan from XNAT
                scan.resources[data_format].download_dir(tmp_dir)
                # Extract the relevant data from the download dir and move to
                # target location
        
                src_path = os.path.join(tmp_dir, args.session, 'scans',
                                        scan_label, 'resources',
                                        data_format, 'files')
                if data_format != 'DICOM':
                    src_path = os.path.join(src_path, target_basename) 
                shutil.move(src_path, target_path)
                # Clean up download dir
                shutil.rmtree(tmp_dir)
                # Append scan to list of downloaded scans
                downloaded.append('{}:{}'.format(exp.label, target_basename))
        if len(downloaded) <= 5:
            msg = "'" + "', '".join(downloaded) + "'"
        else:
            msg = "{} scans".format(len(downloaded))
        print "{} successfully downloaded from {}".format(msg, args.session)
except XnatUtilsUsageError as e:
    print e

    